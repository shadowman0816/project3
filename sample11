workflow:
  payroll.submitted:
    - name: fetchPayrollDetails
      condition: always
      disableRetry: false
      cancellable: true
      immediateRetryCount: 2
      backoffRetry:
        enabled: true
        maxBackoffHours: 3
        cutoffTime: "18:30"  # 6:30 PM EST
        initialDelaySeconds: 900  # 15 minutes
        maxDelaySeconds: 14400  # 4 hours max delay
        multiplier: 2


package net.jpmchase.payroll.processor.service;

import net.jpmchase.payroll.processor.common.aspect.EventLogAspect;
import net.jpmchase.payroll.processor.config.WorkflowRegistry;
import net.jpmchase.payroll.processor.context.WorkflowContext;
import net.jpmchase.payroll.processor.model.StepConfig;
import org.springframework.stereotype.Service;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;

@Slf4j
@Service
@RequiredArgsConstructor
public class EventProcessorService {
    
    private final WorkflowRegistry workflowRegistry;
    private final Map<String, Step> stepRegistry;
    private final EventLogAspect eventLogAspect;
    
    public void processEvent(Event event) {
        List<StepConfig> steps = workflowRegistry.getStepsForEvent(event.getEventType());
        if (steps.isEmpty()) {
            log.warn("No workflow found for event '{}'. Skipping processing.", event.getEventType());
            return;
        }
        
        WorkflowContext context = new WorkflowContext();
        context.setEvent(event);
        context.setStartTime(LocalDateTime.now());
        
        for (StepConfig stepConfig : steps) {
            executeStepWithRetry(stepConfig, context, 0);
        }
    }

    private void executeStepWithRetry(StepConfig stepConfig, WorkflowContext context, int retryCount) {
        Step stepExecutor = stepRegistry.get(stepConfig.getName());
        if (stepExecutor == null) {
            log.warn("Step '{}' not found for event '{}'.", stepConfig.getName(), context.getEvent().getEventType());
            return;
        }
        
        if (!evaluateCondition(stepConfig.getCondition(), context)) {
            log.info("Skipping step '{}' due to condition '{}'.", stepConfig.getName(), stepConfig.getCondition());
            return;
        }
        
        if (stepConfig.isDisableRetry() && retryCount > 0) {
            log.info("Skipping retry for step '{}' since retries are disabled.", stepConfig.getName());
            return;
        }
        
        try {
            stepExecutor.execute(context);
            eventLogAspect.updateEventLog(context.getEvent(), stepConfig.getName(), "SUCCESS", null);
        } catch (Exception e) {
            log.error("Step '{}' failed. Error: {}", stepConfig.getName(), e.getMessage());
            eventLogAspect.updateEventLog(context.getEvent(), stepConfig.getName(), "FAILED", e.getMessage());
            
            if (retryCount < stepConfig.getImmediateRetryCount()) {
                log.info("Retrying step '{}' immediately (Attempt {}).", stepConfig.getName(), retryCount + 1);
                executeStepWithRetry(stepConfig, context, retryCount + 1);
                return;
            }
            
            if (shouldScheduleBackOffRetry(context)) {
                scheduleRetry(context.getEvent(), stepConfig.getName());
            }
        }
    }
    
    private boolean shouldScheduleBackOffRetry(WorkflowContext context) {
        LocalDateTime now = LocalDateTime.now();
        return now.isBefore(context.getStartTime().plusHours(3)) && now.isBefore(LocalDateTime.of(now.toLocalDate(), LocalTime.of(18, 30)));
    }
    
    private void scheduleRetry(Event event, String stepName) {
        log.info("Scheduling back-off retry for step '{}' at later time.", stepName);
        // Code to insert record into retry table (EventBridge scheduler picks up later)
    }
    
    private boolean evaluateCondition(String condition, WorkflowContext context) {
        return "always".equalsIgnoreCase(condition) || context.getEvent().getRouting() != null && condition.contains(context.getEvent().getRouting());
    }
}

import java.time.*;
import java.util.*;

public class WorkflowContext {
    private final Map<String, Object> contextData = new HashMap<>();
    private Instant startTime;
    
    public WorkflowContext() {
        this.startTime = Instant.now();
    }

    public void put(String key, Object value) {
        contextData.put(key, value);
    }

    public Object get(String key) {
        return contextData.get(key);
    }

    public boolean isWithinBackoffPeriod(Duration allowedDuration, LocalTime cutoffTime) {
        Duration elapsed = Duration.between(startTime, Instant.now());
        return elapsed.compareTo(allowedDuration) < 0 && LocalTime.now().isBefore(cutoffTime);
    }
}

public class StepConfig {
    private String name;
    private String condition;
    private boolean disableRetry;
    private boolean cancellable;
    private int immediateRetryCount;
    private int backoffRetryHours;
    private LocalTime cutoffTime;

    // Getters and setters
}

public class WorkflowRegistry {
    private Map<String, List<StepConfig>> workflowMap;

    public WorkflowRegistry(Map<String, List<StepConfig>> workflowMap) {
        this.workflowMap = workflowMap;
    }

    public List<StepConfig> getStepsForEvent(String eventType) {
        return workflowMap.getOrDefault(eventType, Collections.emptyList());
    }
}

public class EventProcessorService {
    private final WorkflowRegistry workflowRegistry;
    private final Map<String, StepExecutor> stepRegistry;

    public EventProcessorService(WorkflowRegistry workflowRegistry, Map<String, StepExecutor> stepRegistry) {
        this.workflowRegistry = workflowRegistry;
        this.stepRegistry = stepRegistry;
    }

    public void processEvent(Event event) {
        List<StepConfig> steps = workflowRegistry.getStepsForEvent(event.getEventType());
        if (steps.isEmpty()) {
            log.warn("No workflow found for event {}", event.getEventType());
            return;
        }

        WorkflowContext context = new WorkflowContext();
        for (StepConfig stepConfig : steps) {
            executeStepWithRetry(stepConfig, event, context, 0);
        }
    }

    private void executeStepWithRetry(StepConfig stepConfig, Event event, WorkflowContext context, int retryCount) {
        StepExecutor stepExecutor = stepRegistry.get(stepConfig.getName());
        if (stepExecutor == null) {
            log.warn("Step {} not found for event {}", stepConfig.getName(), event.getEventType());
            return;
        }

        if (!evaluateCondition(stepConfig.getCondition(), event)) {
            log.info("Skipping step {} due to condition", stepConfig.getName());
            return;
        }

        try {
            stepExecutor.execute(event, context);
            log.info("Step {} executed successfully", stepConfig.getName());
        } catch (Exception e) {
            log.error("Step {} failed. Retrying if applicable", stepConfig.getName());
            if (retryCount < stepConfig.getImmediateRetryCount()) {
                executeStepWithRetry(stepConfig, event, context, retryCount + 1);
            } else if (context.isWithinBackoffPeriod(Duration.ofHours(stepConfig.getBackoffRetryHours()), stepConfig.getCutoffTime())) {
                scheduleRetry(event, stepConfig.getName(), retryCount);
            }
        }
    }

    private boolean evaluateCondition(String condition, Event event) {
        return "always".equalsIgnoreCase(condition) || (event.getRouting() != null && event.getRouting().contains(condition));
    }

    private void scheduleRetry(Event event, String step, int retryCount) {
        log.info("Scheduling retry for {} in backoff period", step);
    }
}

import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;

private void retryWithBackoff(StepConfig stepConfig, Event event, WorkFlowContext context, int retryCount) {
    WorkflowStepConfig.BackoffRetryConfig retryConfig = workFlowRegistry.getBackoffRetryConfig(event.getEventType(), stepConfig.getName());

    if (retryConfig == null || !retryConfig.isEnabled()) {
        log.warn("Backoff retry disabled for step '{}'.", stepConfig.getName());
        return;
    }

    LocalDateTime eventStartTime = context.getStartTime();
    LocalDateTime currentTime = LocalDateTime.now(ZoneId.of("America/New_York"));
    LocalDateTime cutoffTime = LocalDateTime.of(currentTime.toLocalDate(), 
                        LocalTime.parse(retryConfig.getCutoffTime(), DateTimeFormatter.ofPattern("HH:mm")));
    LocalDateTime maxRetryTime = eventStartTime.plusHours(retryConfig.getMaxBackoffHours());

    if (currentTime.isAfter(maxRetryTime) || currentTime.isAfter(cutoffTime)) {
        log.error("Step '{}' exceeded retry limits. Max retry time: {}, Cutoff time: {}. Marking as FAILED.", 
                  stepConfig.getName(), maxRetryTime, cutoffTime);
        eventLogAspect.updateEventLog(event, stepConfig.getName(), "FAILED", "Retry time exceeded.");
        return;
    }

    int delay = retryConfig.getInitialDelaySeconds() * (int) Math.pow(retryConfig.getMultiplier(), retryCount);

    if (delay > retryConfig.getMaxDelaySeconds()) {
        delay = retryConfig.getMaxDelaySeconds();
    }

    log.info("Scheduling retry for '{}' in {} seconds (Attempt {}/{}).", 
             stepConfig.getName(), delay, retryCount + 1, workFlowRegistry.getRetryCountForStep(event.getEventType(), stepConfig.getName()));

    scheduleRetry(event, stepConfig.getName(), retryCount, delay);
}

public class WorkflowRegistry {
    private final Map<String, List<WorkflowStepConfig>> workflows;

    public WorkflowRegistry(YamlConfigLoader configLoader) {
        this.workflows = configLoader.loadWorkflows();
    }

    public WorkflowStepConfig.BackoffRetryConfig getBackoffRetryConfig(String eventType, String stepName) {
        return workflows.getOrDefault(eventType, Collections.emptyList())
                .stream()
                .filter(step -> step.getName().equals(stepName))
                .map(WorkflowStepConfig::getBackoffRetry)
                .findFirst()
                .orElse(null);
    }
}

public class WorkflowStepConfig {
    private String name;
    private String condition;
    private boolean disableRetry;
    private boolean cancellable;
    private int immediateRetryCount;
    private BackoffRetryConfig backoffRetry;

    // Getters and setters

    public static class BackoffRetryConfig {
        private boolean enabled;
        private int maxBackoffHours;
        private String cutoffTime;  // HH:mm format
        private int initialDelaySeconds;
        private int maxDelaySeconds;
        private int multiplier;

        // Getters and setters
    }
}

import java.time.*;
import java.util.*;

public class WorkflowContext {
    private final Map<String, Object> contextData = new HashMap<>();
    private Instant startTime;
    
    public WorkflowContext() {
        this.startTime = Instant.now();
    }

    public void put(String key, Object value) {
        contextData.put(key, value);
    }

    public Object get(String key) {
        return contextData.get(key);
    }

    public boolean isWithinBackoffPeriod(Duration allowedDuration, LocalTime cutoffTime) {
        Duration elapsed = Duration.between(startTime, Instant.now());
        return elapsed.compareTo(allowedDuration) < 0 && LocalTime.now().isBefore(cutoffTime);
    }
}

public class StepConfig {
    private String name;
    private String condition;
    private boolean disableRetry;
    private boolean cancellable;
    private int immediateRetryCount;
    private int backoffRetryHours;
    private LocalTime cutoffTime;

    // Getters and setters
}

public class WorkflowRegistry {
    private Map<String, List<StepConfig>> workflowMap;

    public WorkflowRegistry(Map<String, List<StepConfig>> workflowMap) {
        this.workflowMap = workflowMap;
    }

    public List<StepConfig> getStepsForEvent(String eventType) {
        return workflowMap.getOrDefault(eventType, Collections.emptyList());
    }
}

public class EventProcessorService {
    private final WorkflowRegistry workflowRegistry;
    private final Map<String, StepExecutor> stepRegistry;

    public EventProcessorService(WorkflowRegistry workflowRegistry, Map<String, StepExecutor> stepRegistry) {
        this.workflowRegistry = workflowRegistry;
        this.stepRegistry = stepRegistry;
    }

    public void processEvent(Event event) {
        List<StepConfig> steps = workflowRegistry.getStepsForEvent(event.getEventType());
        if (steps.isEmpty()) {
            log.warn("No workflow found for event {}", event.getEventType());
            return;
        }

        WorkflowContext context = new WorkflowContext();
        for (StepConfig stepConfig : steps) {
            executeStepWithRetry(stepConfig, event, context, 0);
        }
    }

    private void executeStepWithRetry(StepConfig stepConfig, Event event, WorkflowContext context, int retryCount) {
        StepExecutor stepExecutor = stepRegistry.get(stepConfig.getName());
        if (stepExecutor == null) {
            log.warn("Step {} not found for event {}", stepConfig.getName(), event.getEventType());
            return;
        }

        if (!evaluateCondition(stepConfig.getCondition(), event)) {
            log.info("Skipping step {} due to condition", stepConfig.getName());
            return;
        }

        try {
            stepExecutor.execute(event, context);
            log.info("Step {} executed successfully", stepConfig.getName());
        } catch (Exception e) {
            log.error("Step {} failed. Retrying if applicable", stepConfig.getName());
            if (retryCount < stepConfig.getImmediateRetryCount()) {
                executeStepWithRetry(stepConfig, event, context, retryCount + 1);
            } else if (context.isWithinBackoffPeriod(Duration.ofHours(stepConfig.getBackoffRetryHours()), stepConfig.getCutoffTime())) {
                scheduleRetry(event, stepConfig.getName(), retryCount);
            }
        }
    }

    private boolean evaluateCondition(String condition, Event event) {
        return "always".equalsIgnoreCase(condition) || (event.getRouting() != null && event.getRouting().contains(condition));
    }

    private void scheduleRetry(Event event, String step, int retryCount) {
        log.info("Scheduling retry for {} in backoff period", step);
    }
}
