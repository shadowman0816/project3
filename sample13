package net.jpmchase.payroll.processor.common.aspect;

import net.jpmchase.payroll.processor.common.entity.EventLogEntity;
import net.jpmchase.payroll.processor.common.model.Event;
import net.jpmchase.payroll.processor.common.repository.EventLogRepository;
import org.aspectj.lang.ProceedingJoinPoint;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class EventLogAspectTest {

    @Mock
    private EventLogRepository eventLogRepository;

    @InjectMocks
    private EventLogAspect eventLogAspect;

    private Event mockEvent;

    @BeforeEach
    void setUp() {
        mockEvent = new Event();
        mockEvent.setEventUuid(UUID.randomUUID());
        mockEvent.setEventType("PAYROLL_SUBMITTED");
    }

    @Test
    void testTrackStepExecution_Successful() throws Throwable {
        // Mock ProceedingJoinPoint
        ProceedingJoinPoint mockJoinPoint = mock(ProceedingJoinPoint.class);
        when(mockJoinPoint.getSignature().getName()).thenReturn("fetchPayrollDetails");
        when(mockJoinPoint.getArgs()).thenReturn(new Object[]{mockEvent});
        when(mockJoinPoint.proceed()).thenReturn("Success");

        EventLogEntity eventLogEntity = new EventLogEntity();
        when(eventLogRepository.findBySrcEvtId(mockEvent.getEventUuid().toString())).thenReturn(eventLogEntity);

        Object result = eventLogAspect.trackStepExecution(mockJoinPoint);

        assertEquals("Success", result);
        verify(eventLogRepository, times(2)).save(any(EventLogEntity.class));
    }

    @Test
    void testTrackStepExecution_Failure() throws Throwable {
        // Mock ProceedingJoinPoint
        ProceedingJoinPoint mockJoinPoint = mock(ProceedingJoinPoint.class);
        when(mockJoinPoint.getSignature().getName()).thenReturn("fetchPayrollDetails");
        when(mockJoinPoint.getArgs()).thenReturn(new Object[]{mockEvent});
        when(mockJoinPoint.proceed()).thenThrow(new RuntimeException("Step failed"));

        EventLogEntity eventLogEntity = new EventLogEntity();
        when(eventLogRepository.findBySrcEvtId(mockEvent.getEventUuid().toString())).thenReturn(eventLogEntity);

        Exception exception = assertThrows(RuntimeException.class, () -> eventLogAspect.trackStepExecution(mockJoinPoint));

        assertEquals("Step failed", exception.getMessage());
        verify(eventLogRepository, times(2)).save(any(EventLogEntity.class)); // Once for PROCESSOR_CONSUMED, once for FAILED
    }

    @Test
    void testUpdateEventLog_NewLogEntry() {
        when(eventLogRepository.findBySrcEvtId(mockEvent.getEventUuid().toString())).thenReturn(null);

        eventLogAspect.updateEventLog(mockEvent, "fetchPayrollDetails", "SUCCESS", null);

        verify(eventLogRepository, times(1)).save(any(EventLogEntity.class));
    }

    @Test
    void testUpdateEventLog_ExistingLogEntry() {
        EventLogEntity eventLogEntity = new EventLogEntity();
        when(eventLogRepository.findBySrcEvtId(mockEvent.getEventUuid().toString())).thenReturn(eventLogEntity);

        eventLogAspect.updateEventLog(mockEvent, "fetchPayrollDetails", "FAILED", "Error occurred");

        assertEquals("FAILED", eventLogEntity.getStatus());
        assertEquals("Error occurred", eventLogEntity.getFailureReason());
        verify(eventLogRepository, times(1)).save(eventLogEntity);
    }
}
package net.jpmchase.payroll.processor.registry;

import net.jpmchase.payroll.processor.common.config.StepConfig;
import net.jpmchase.payroll.processor.common.config.WorkFlowConfig;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class WorkFlowRegistryTest {

    @Mock
    private WorkFlowConfig workFlowConfig;

    @InjectMocks
    private WorkFlowRegistry workFlowRegistry;

    private final String ENTITY_TYPE = "Payroll";
    private final String EVENT_TYPE = "payroll.submitted";
    private final String STEP_NAME = "fetchPayrollDetails";

    private StepConfig stepConfig;

    @BeforeEach
    void setUp() {
        stepConfig = new StepConfig();
        stepConfig.setName(STEP_NAME);
        stepConfig.setImmediateRetryCount(2);

        StepConfig.BackOffSettings backOffSettings = new StepConfig.BackOffSettings();
        backOffSettings.setEnabled(true);
        backOffSettings.setMaxBackOffHours(3);
        stepConfig.setBackOffRetry(backOffSettings);

        Map<String, List<StepConfig>> eventTypeMap = new HashMap<>();
        eventTypeMap.put(EVENT_TYPE, Collections.singletonList(stepConfig));

        Map<String, Map<String, List<StepConfig>>> groupMap = new HashMap<>();
        groupMap.put(ENTITY_TYPE, eventTypeMap);

        when(workFlowConfig.getGroups()).thenReturn(groupMap);
    }

    @Test
    void testGetStepsForEvent_ValidEvent() {
        List<StepConfig> steps = workFlowRegistry.getStepsForEvent(ENTITY_TYPE, EVENT_TYPE);
        assertNotNull(steps);
        assertFalse(steps.isEmpty());
        assertEquals(STEP_NAME, steps.get(0).getName());
    }

    @Test
    void testGetStepsForEvent_InvalidEvent() {
        List<StepConfig> steps = workFlowRegistry.getStepsForEvent("InvalidEntity", "invalid.event");
        assertNotNull(steps);
        assertTrue(steps.isEmpty());
    }

    @Test
    void testGetStepConfig_ValidStep() {
        StepConfig result = workFlowRegistry.getStepConfig(ENTITY_TYPE, EVENT_TYPE, STEP_NAME);
        assertNotNull(result);
        assertEquals(STEP_NAME, result.getName());
    }

    @Test
    void testGetStepConfig_InvalidStep() {
        StepConfig result = workFlowRegistry.getStepConfig(ENTITY_TYPE, EVENT_TYPE, "InvalidStep");
        assertNull(result);
    }

    @Test
    void testGetRetryCountForStep_ValidStep() {
        int retryCount = workFlowRegistry.getRetryCountForStep(ENTITY_TYPE, EVENT_TYPE, STEP_NAME);
        assertEquals(2, retryCount);
    }

    @Test
    void testGetRetryCountForStep_InvalidStep() {
        int retryCount = workFlowRegistry.getRetryCountForStep(ENTITY_TYPE, EVENT_TYPE, "InvalidStep");
        assertEquals(0, retryCount);
    }

    @Test
    void testGetBackOffRetry_Enabled() {
        int backOffRetry = workFlowRegistry.getBackOffRetry(ENTITY_TYPE, EVENT_TYPE, STEP_NAME, 1);
        assertEquals(3, backOffRetry);
    }

    @Test
    void testGetBackOffRetry_Disabled() {
        stepConfig.getBackOffRetry().setEnabled(false);
        int backOffRetry = workFlowRegistry.getBackOffRetry(ENTITY_TYPE, EVENT_TYPE, STEP_NAME, 1);
        assertEquals(0, backOffRetry);
    }
}

package net.jpmchase.payroll.processor.steps.payroll;

import net.jpmchase.payroll.processor.common.context.WorkflowContext;
import net.jpmchase.payroll.processor.model.Event;
import net.jpmchase.payroll.processor.remote.gusto.model.payroll.Payroll;
import net.jpmchase.payroll.processor.service.GustoPayrollService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class FetchPayrollDetailsStepTest {

    @Mock
    private GustoPayrollService payrollService;

    @InjectMocks
    private FetchPayrollDetailsStep fetchPayrollDetailsStep;

    private WorkflowContext context;
    private Event event;

    @BeforeEach
    void setUp() {
        // Mock Event Object
        event = new Event();
        event.setEntityUUID("123e4567-e89b-12d3-a456-426614174000");
        event.setResourceUUID("987f6543-e21c-45b6-8a78-5d6320190000");
        event.setEventType("payroll.submitted");

        // Mock WorkflowContext
        context = new WorkflowContext();
        context.put("event", event);
    }

    @Test
    void testExecute_Success() {
        // Mock Payroll Response
        Payroll payrollResponse = mock(Payroll.class);
        when(payrollResponse.getPayrollDate()).thenReturn("2024-03-15");

        when(payrollService.getSinglePayroll(anyString(), anyString())).thenReturn(payrollResponse);

        // Execute Step
        fetchPayrollDetailsStep.execute(context);

        // Verify Context Updates
        assertEquals("2024-03-15", context.get("payrollDate", String.class));
        assertEquals("success", context.getStatus());

        // Verify Logging & Service Calls
        verify(payrollService, times(1)).getSinglePayroll(anyString(), anyString());
    }

    @Test
    void testExecute_MissingEventData() {
        // Remove Event from Context
        context.remove("event");

        Exception exception = assertThrows(NullPointerException.class, () -> {
            fetchPayrollDetailsStep.execute(context);
        });

        assertTrue(exception.getMessage().contains("event"));
    }

    @Test
    void testExecute_PayrollServiceFailure() {
        when(payrollService.getSinglePayroll(anyString(), anyString())).thenThrow(new RuntimeException("Service unavailable"));

        Exception exception = assertThrows(RuntimeException.class, () -> {
            fetchPayrollDetailsStep.execute(context);
        });

        assertEquals("Service unavailable", exception.getMessage());

        // Ensure context status does not update
        assertNull(context.get("payrollDate", String.class));
        assertNull(context.getStatus());

        // Verify Logging & Service Calls
        verify(payrollService, times(1)).getSinglePayroll(anyString(), anyString());
    }
}
package net.jpmchase.payroll.processor.steps.payroll;

import net.jpmchase.payroll.processor.common.context.WorkflowContext;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.junit.jupiter.MockitoExtension;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(MockitoExtension.class)
class SameVsFutDatePayrollStepTest {

    private static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern("yyyy-MM-dd");

    @InjectMocks
    private SameVsFutDatePayrollStep sameVsFutDatePayrollStep;

    private WorkflowContext context;

    @BeforeEach
    void setUp() {
        context = new WorkflowContext();
    }

    @Test
    void testExecute_SameDayPayroll() {
        String today = LocalDate.now().format(DATE_FORMAT);
        context.put("payrollDate", today);

        sameVsFutDatePayrollStep.execute(context);

        assertEquals("PROCESS_PAYROLL", context.get("routing", String.class));
    }

    @Test
    void testExecute_FutureDatedPayroll() {
        String futureDate = LocalDate.now().plusDays(5).format(DATE_FORMAT);
        context.put("payrollDate", futureDate);

        sameVsFutDatePayrollStep.execute(context);

        assertEquals("SCHEDULE_PAYROLL", context.get("routing", String.class));
    }

    @Test
    void testExecute_BackdatedPayroll() {
        String pastDate = LocalDate.now().minusDays(3).format(DATE_FORMAT);
        context.put("payrollDate", pastDate);

        sameVsFutDatePayrollStep.execute(context);

        assertEquals("IGNORE", context.get("routing", String.class));
    }

    @Test
    void testExecute_MissingPayrollDate() {
        Exception exception = assertThrows(NullPointerException.class, () -> {
            sameVsFutDatePayrollStep.execute(context);
        });

        assertTrue(exception.getMessage().contains("payrollDate"));
    }
}

