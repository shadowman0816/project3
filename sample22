@Component("storeEmployeeBankAccountInformation")
@RequiredArgsConstructor
@Slf4j
public class StorePayeeBankAccountInformationStep implements Step {

    private final PayeeRepository payeeRepository;
    private final PayeeAccountRepository payeeAccountRepository;
    private final PayeeAccountAuditRepository payeeAccountAuditRepository;

    @Override
    @Transactional
    public void execute(WorkflowContext context) {
        Boolean updateToCheck = (Boolean) context.get("updateToCheck");
        if (!Boolean.TRUE.equals(updateToCheck)) {
            log.info("Skipping step. updateToCheck is not true.");
            return;
        }

        Event event = context.get("event", Event.class);
        String payeeId = Optional.ofNullable(event)
            .map(Event::getMessageBody)
            .map(MessageBody::getEntityUUID)
            .map(UUID::toString)
            .orElseThrow(() -> new BusinessException("Missing Payee UUID", "PYRL_0001"));

        log.info("Updating payee {} to payment method CHECK", payeeId);

        // Step 1: Update payee table
        PyrlPayeeEntity payee = payeeRepository.findBySrcPayeeId(payeeId)
            .orElseThrow(() -> new ProcessorException("Payee not found for id: " + payeeId));

        payee.setPymtModeNm("CHECK");
        payee.setPyrlDlvrTypeCd("CHECK");
        payeeRepository.save(payee);

        // Step 2: Audit and update payee account
        PyrlPayeeAcctEntity payeeAcct = payeeAccountRepository.findActiveBySrcPayeeId(payeeId)
            .orElseThrow(() -> new ProcessorException("Active payee account not found for payeeId: " + payeeId));

        // Copy to audit
        PyrlPayeeAcctAudtEntity auditEntity = new PyrlPayeeAcctAudtEntity(payeeAcct); // Assuming constructor copy
        payeeAccountAuditRepository.save(auditEntity);

        // Mark current account inactive
        payeeAcct.setPayeeAcctStsCd("INACTIVE");
        payeeAccountRepository.save(payeeAcct);

        log.info("Completed update to CHECK for payee {}", payeeId);
    }
}
@ExtendWith(MockitoExtension.class)
class StorePayeeBankAccountInformationStepTest {

    @Mock private PayeeRepository payeeRepository;
    @Mock private PayeeAccountRepository payeeAccountRepository;
    @Mock private PayeeAccountAuditRepository payeeAccountAuditRepository;

    @InjectMocks
    private StorePayeeBankAccountInformationStep step;

    @Test
    void testUpdateToCheckTrue_PerformsAllUpdates() {
        // Given
        UUID payeeId = UUID.randomUUID();
        WorkflowContext context = new WorkflowContext();
        context.put("updateToCheck", true);
        context.put("event", TestUtils.mockEventWithResourceUUID(payeeId.toString()));

        PyrlPayeeEntity payee = new PyrlPayeeEntity();
        payee.setPymtModeNm("ACH");
        payee.setPyrlDlvrTypeCd("ACH");

        PyrlPayeeAcctEntity account = new PyrlPayeeAcctEntity();
        account.setPayeeAcctStsCd("ACTIVE");
        account.setSrcPayeeId(payeeId.toString());

        when(payeeRepository.findBySrcPayeeId(payeeId.toString())).thenReturn(Optional.of(payee));
        when(payeeAccountRepository.findActiveBySrcPayeeId(payeeId.toString())).thenReturn(Optional.of(account));

        // When
        step.execute(context);

        // Then
        assertEquals("CHECK", payee.getPymtModeNm());
        assertEquals("CHECK", payee.getPyrlDlvrTypeCd());
        assertEquals("INACTIVE", account.getPayeeAcctStsCd());

        verify(payeeRepository).save(payee);
        verify(payeeAccountAuditRepository).save(any(PyrlPayeeAcctAudtEntity.class));
        verify(payeeAccountRepository).save(account);
    }

    @Test
    void testUpdateToCheckFalse_SkipsExecution() {
        WorkflowContext context = new WorkflowContext();
        context.put("updateToCheck", false);

        step.execute(context);

        verifyNoInteractions(payeeRepository, payeeAccountRepository, payeeAccountAuditRepository);
    }

    @Test
    void testMissingPayee_ThrowsProcessorException() {
        UUID payeeId = UUID.randomUUID();
        WorkflowContext context = new WorkflowContext();
        context.put("updateToCheck", true);
        context.put("event", TestUtils.mockEventWithResourceUUID(payeeId.toString()));

        when(payeeRepository.findBySrcPayeeId(payeeId.toString())).thenReturn(Optional.empty());

        ProcessorException ex = assertThrows(ProcessorException.class, () -> step.execute(context));
        assertTrue(ex.getMessage().contains("Payee not found"));
    }

    @Test
    void testMissingActivePayeeAccount_ThrowsProcessorException() {
        UUID payeeId = UUID.randomUUID();
        WorkflowContext context = new WorkflowContext();
        context.put("updateToCheck", true);
        context.put("event", TestUtils.mockEventWithResourceUUID(payeeId.toString()));

        PyrlPayeeEntity payee = new PyrlPayeeEntity();
        when(payeeRepository.findBySrcPayeeId(payeeId.toString())).thenReturn(Optional.of(payee));
        when(payeeAccountRepository.findActiveBySrcPayeeId(payeeId.toString())).thenReturn(Optional.empty());

        ProcessorException ex = assertThrows(ProcessorException.class, () -> step.execute(context));
        assertTrue(ex.getMessage().contains("Active payee account not found"));
    }
}

