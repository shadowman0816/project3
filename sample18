@Component("DeterminePayrollInProgress")
@RequiredArgsConstructor
@Slf4j
public class DeterminePayrollInProgressStep implements Step {

    private final PayrollRepository payrollRepository;
    private final PayrollEventLogRepository eventLogRepository;

    @Transactional
    @Override
    public void execute(WorkflowContext context) {
        String payrollId = (String) context.get("payrollId");
        String eventId = (String) context.get("eventId");

        if (payrollId == null) {
            throw new IllegalArgumentException("Missing required context value: payrollId");
        }

        if (eventId == null) {
            log.warn("Missing eventId in context for payrollId: {}", payrollId);
        }

        Optional<Payroll> payrollOpt = payrollRepository.findBySrcPayrollId(payrollId);

        if (payrollOpt.isEmpty()) {
            log.info("No payroll found for id: {}. Treating as valid case and skipping.", payrollId);
            return;
        }

        Payroll payroll = payrollOpt.get();
        if ("IN_PROGRESS".equalsIgnoreCase(payroll.getStatusCode())) {
            log.info("Payroll is in progress for id: {}. Marking event as failed.", payrollId);

            PayrollEventLog logEntry = new PayrollEventLog();
            logEntry.setSrcEventId(eventId);
            logEntry.setEventName("DeterminePayrollInProgress");
            logEntry.setEventStatus("FAILED");
            logEntry.setErrorDescription("Payroll is currently in progress.");
            logEntry.setUpdateTimestamp(LocalDateTime.now());

            eventLogRepository.save(logEntry);
            context.setStatus("failed");
        } else {
            log.info("Payroll is not in progress for id: {}. Proceeding with workflow.", payrollId);
        }
    }
}