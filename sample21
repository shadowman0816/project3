@Component("CompanyEnrollmentDeterminationStep")
@RequiredArgsConstructor
@Slf4j
public class CompanyEnrollmentDeterminationStep implements Step {

    private final CompanyEnrollmentRepository companyEnrollmentRepository;
    private final GustoEmployeeService gustoEmployeeService;
    private final GustoContractorService gustoContractorService;

    private static final String ONBOARDING_COMPLETED = "COMPLETE";

    @Override
    public void execute(WorkflowContext context) {
        Event event = context.get("event", Event.class);

        String companyId = Optional.ofNullable(event)
                .map(Event::getMessageBody)
                .map(MessageBody::getResourceUUID)
                .map(UUID::toString)
                .orElseThrow(() -> new BusinessException("Missing required context value: companyId"));

        String payeeId = Optional.ofNullable(event)
                .map(Event::getMessageBody)
                .map(MessageBody::getEntityUUID)
                .map(UUID::toString)
                .orElseThrow(() -> new BusinessException("Missing required context value: payeeId"));

        String payeeType = Optional.ofNullable(event)
                .map(Event::getMessageBody)
                .map(MessageBody::getEntityType)
                .orElse("employee"); // default fallback

        log.info("Checking enrollment for companyId: {}, payeeId: {}, payeeType: {}", companyId, payeeId, payeeType);

        Optional<CompanyEnrollmentEntity> enrollmentOpt =
                companyEnrollmentRepository.findByRelEntpPrtyId(companyId);

        if (enrollmentOpt.isEmpty()) {
            log.warn("No enrollment found for companyId: {}. Skipping.", companyId);
            context.put("companyEnrolled", false);
            return;
        }

        CompanyEnrollmentEntity enrollment = enrollmentOpt.get();
        EnrollmentStatusEntity status = enrollment.getEnrlSts();

        if (ONBOARDING_COMPLETED.equalsIgnoreCase(status.getEnrlStsCd())) {
            log.info("Enrollment already COMPLETE for companyId: {}. Skipping.", companyId);
            context.put("companyEnrolled", true);
            return;
        }

        log.info("Enrollment status not complete. Calling Gusto to verify onboarding status...");

        boolean isOnboarded = false;

        if ("employee".equalsIgnoreCase(payeeType)) {
            EmployeeOnboardingResponse response =
                    gustoEmployeeService.getEmployeeOnboardingStatus(companyId, payeeId);
            isOnboarded = Boolean.TRUE.equals(response.getOnboardingCompleted());
        } else if ("contractor".equalsIgnoreCase(payeeType)) {
            ContractorOnboardingResponse response =
                    gustoContractorService.getContractorOnboardingStatus(companyId, payeeId);
            isOnboarded = Boolean.TRUE.equals(response.getOnboardingCompleted());
        }

        if (isOnboarded) {
            log.info("Gusto returned onboarded. Updating enrollment status to COMPLETE.");
            status.setEnrlStsCd(ONBOARDING_COMPLETED);
            enrollment.setEnrlSts(status);
            companyEnrollmentRepository.save(enrollment);
            context.put("companyEnrolled", true);
        } else {
            log.warn("Gusto returned not onboarded. Enrollment incomplete for companyId: {}", companyId);
            context.put("companyEnrolled", false);
        }
    }
}