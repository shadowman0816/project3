package net.jpmchase.payroll.processor.steps.payee;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.jpmchase.payroll.processor.client.GustoEmployeeService;
import net.jpmchase.payroll.processor.common.context.WorkflowContext;
import net.jpmchase.payroll.processor.domain.CompanyEnrollmentRepository;
import net.jpmchase.payroll.processor.domain.entity.EnrollmentEntity;
import net.jpmchase.payroll.processor.domain.entity.EnrollmentStatusEntity;
import net.jpmchase.payroll.processor.steps.Step;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.util.Optional;

@Slf4j
@Component("CompanyEnrollmentDeterminationStep")
@RequiredArgsConstructor
public class CompanyEnrollmentDeterminationStep implements Step {

    private final CompanyEnrollmentRepository companyEnrollmentRepository;
    private final GustoEmployeeService gustoEmployeeService;

    @Override
    @Transactional
    public void execute(WorkflowContext context) {
        var event = context.get("event", net.jpmchase.payroll.processor.events.Event.class);

        String companyId = Optional.ofNullable(event)
                .map(e -> e.getMessageBody().getResourceUUID())
                .map(Object::toString)
                .orElseThrow(() -> new IllegalArgumentException("Missing required context value: companyId"));

        String payeeId = Optional.ofNullable(event)
                .map(e -> e.getMessageBody().getEntityUUID())
                .map(Object::toString)
                .orElseThrow(() -> new IllegalArgumentException("Missing required context value: payeeId"));

        String payeeType = Optional.ofNullable(event)
                .map(e -> e.getMessageBody().getEntityType())
                .orElse("employee");

        log.info("Checking enrollment for companyId: {}, payeeId: {}, payeeType: {}", companyId, payeeId, payeeType);

        Optional<EnrollmentEntity> enrollmentOpt = companyEnrollmentRepository.findByRelEntpPrtyId(companyId);

        if (enrollmentOpt.isEmpty()) {
            log.warn("No enrollment found for companyId: {}. Skipping.", companyId);
            context.put("companyEnrolled", false);
            return;
        }

        EnrollmentEntity enrollment = enrollmentOpt.get();
        EnrollmentStatusEntity status = enrollment.getEnrlStsCd();

        if ("COMPLETE".equalsIgnoreCase(status.getEnrlStsCd())) {
            log.info("Enrollment already COMPLETE for companyId: {}", companyId);
            context.put("companyEnrolled", true);
            return;
        }

        log.info("Enrollment status not complete. Calling Gusto to verify onboarding status...");

        boolean isOnboarded = gustoEmployeeService.getEmployeeOnboardingStatus(companyId, payeeId, payeeType);

        if (isOnboarded) {
            log.info("Gusto returned onboarded. Updating enrollment status to COMPLETE.");
            status.setEnrlStsCd("COMPLETE");
            enrollment.setEnrlStsCd(status);
            companyEnrollmentRepository.save(enrollment);
            context.put("companyEnrolled", true);
        } else {
            log.warn("Gusto returned not onboarded. Enrollment incomplete for companyId: {}", companyId);
            context.put("companyEnrolled", false);
        }
    }
}