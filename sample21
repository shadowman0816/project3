@Component("CompanyEnrollmentDeterminationStep")
@RequiredArgsConstructor
@Slf4j
public class CompanyEnrollmentDeterminationStep implements Step {

    private final CompanyEnrollmentRepository companyEnrollmentRepository;
    private final GustoEmployeeService gustoEmployeeService;
    private final GustoContractorService gustoContractorService;

    private static final String ONBOARDING_COMPLETED = "COMPLETE";

    @Override
    public void execute(WorkflowContext context) {
        Event event = context.get("event", Event.class);

        String companyId = Optional.ofNullable(event)
                .map(Event::getMessageBody)
                .map(MessageBody::getResourceUUID)
                .map(UUID::toString)
                .orElseThrow(() -> new BusinessException("Missing required context value: companyId"));

        String payeeId = Optional.ofNullable(event)
                .map(Event::getMessageBody)
                .map(MessageBody::getEntityUUID)
                .map(UUID::toString)
                .orElseThrow(() -> new BusinessException("Missing required context value: payeeId"));

        String payeeType = Optional.ofNullable(event)
                .map(Event::getMessageBody)
                .map(MessageBody::getEntityType)
                .orElse("employee"); // default fallback

        log.info("Checking enrollment for companyId: {}, payeeId: {}, payeeType: {}", companyId, payeeId, payeeType);

        Optional<CompanyEnrollmentEntity> enrollmentOpt =
                companyEnrollmentRepository.findByRelEntpPrtyId(companyId);

        if (enrollmentOpt.isEmpty()) {
            log.warn("No enrollment found for companyId: {}. Skipping.", companyId);
            context.put("companyEnrolled", false);
            return;
        }

        CompanyEnrollmentEntity enrollment = enrollmentOpt.get();
        EnrollmentStatusEntity status = enrollment.getEnrlSts();

        if (ONBOARDING_COMPLETED.equalsIgnoreCase(status.getEnrlStsCd())) {
            log.info("Enrollment already COMPLETE for companyId: {}. Skipping.", companyId);
            context.put("companyEnrolled", true);
            return;
        }

        log.info("Enrollment status not complete. Calling Gusto to verify onboarding status...");

        boolean isOnboarded = false;

        if ("employee".equalsIgnoreCase(payeeType)) {
            EmployeeOnboardingResponse response =
                    gustoEmployeeService.getEmployeeOnboardingStatus(companyId, payeeId);
            isOnboarded = Boolean.TRUE.equals(response.getOnboardingCompleted());
        } else if ("contractor".equalsIgnoreCase(payeeType)) {
            ContractorOnboardingResponse response =
                    gustoContractorService.getContractorOnboardingStatus(companyId, payeeId);
            isOnboarded = Boolean.TRUE.equals(response.getOnboardingCompleted());
        }

        if (isOnboarded) {
            log.info("Gusto returned onboarded. Updating enrollment status to COMPLETE.");
            status.setEnrlStsCd(ONBOARDING_COMPLETED);
            enrollment.setEnrlSts(status);
            companyEnrollmentRepository.save(enrollment);
            context.put("companyEnrolled", true);
        } else {
            log.warn("Gusto returned not onboarded. Enrollment incomplete for companyId: {}", companyId);
            context.put("companyEnrolled", false);
        }
    }
}
package net.jpmchase.payroll.processor.steps.payee;

import net.jpmchase.payroll.processor.common.context.WorkflowContext;
import net.jpmchase.payroll.processor.domain.entity.EnrollmentEntity;
import net.jpmchase.payroll.processor.domain.entity.EnrollmentStatusEntity;
import net.jpmchase.payroll.processor.exception.ProcessorException;
import net.jpmchase.payroll.processor.remote.gusto.model.CompanyOnboardingResponse;
import net.jpmchase.payroll.processor.repository.EnrollmentRepository;
import net.jpmchase.payroll.processor.service.GustoCompanyService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class CompanyEnrollmentDeterminationStepTest {

    @Mock
    private EnrollmentRepository companyEnrollmentRepository;

    @Mock
    private GustoCompanyService gustoCompanyService;

    @InjectMocks
    private CompanyEnrollmentDeterminationStep step;

    private WorkflowContext context;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        context = new WorkflowContext();
    }

    @Test
    void testMissingCompanyId_ThrowsException() {
        Exception exception = assertThrows(RuntimeException.class, () -> step.execute(context));
        assertTrue(exception.getMessage().contains("Missing required context value"));
    }

    @Test
    void testEnrollmentNotFound_SetsContextFalse() {
        context.put("event", TestUtils.mockEventWithResourceUUID("company-123"));

        when(companyEnrollmentRepository.findByRelEntpPrtyId("company-123")).thenReturn(Optional.empty());

        step.execute(context);
        assertEquals(false, context.get("companyEnrolled"));
    }

    @Test
    void testEnrollmentAlreadyComplete_SetsContextTrue() {
        context.put("event", TestUtils.mockEventWithResourceUUID("company-123"));

        EnrollmentStatusEntity status = new EnrollmentStatusEntity();
        status.setEnrLstsCd("COMPLETE");

        EnrollmentEntity entity = new EnrollmentEntity();
        entity.setEnrLstsCd(status);

        when(companyEnrollmentRepository.findByRelEntpPrtyId("company-123")).thenReturn(Optional.of(entity));

        step.execute(context);
        assertEquals(true, context.get("companyEnrolled"));
    }

    @Test
    void testEnrollmentIncomplete_GustoReturnsComplete_UpdatesToComplete() {
        context.put("event", TestUtils.mockEventWithResourceUUID("company-123"));

        EnrollmentStatusEntity status = new EnrollmentStatusEntity();
        status.setEnrLstsCd("INCOMPLETE");

        EnrollmentEntity entity = new EnrollmentEntity();
        entity.setRelEntpPrtyId("company-123");
        entity.setSrcCoId("co-id");
        entity.setEnrLstsCd(status);

        when(companyEnrollmentRepository.findByRelEntpPrtyId("company-123")).thenReturn(Optional.of(entity));

        CompanyOnboardingResponse response = new CompanyOnboardingResponse();
        response.setOnboardingStatus("COMPLETE");

        when(gustoCompanyService.getCompanyOnboardingStatus("company-123")).thenReturn(response);

        step.execute(context);
        assertEquals(true, context.get("companyEnrolled"));
        verify(companyEnrollmentRepository).updateEnrLstsCdByRelEntpPrtyIdAndSrcCoId("company-123", "co-id", "COMPLETE");
    }

    @Test
    void testEnrollmentIncomplete_GustoReturnsIncomplete_ThrowsException() {
        context.put("event", TestUtils.mockEventWithResourceUUID("company-123"));

        EnrollmentStatusEntity status = new EnrollmentStatusEntity();
        status.setEnrLstsCd("IN_PROGRESS");

        EnrollmentEntity entity = new EnrollmentEntity();
        entity.setRelEntpPrtyId("company-123");
        entity.setSrcCoId("co-id");
        entity.setEnrLstsCd(status);

        when(companyEnrollmentRepository.findByRelEntpPrtyId("company-123")).thenReturn(Optional.of(entity));

        CompanyOnboardingResponse response = new CompanyOnboardingResponse();
        response.setOnboardingStatus("NOT_STARTED");

        when(gustoCompanyService.getCompanyOnboardingStatus("company-123")).thenReturn(response);

        ProcessorException exception = assertThrows(ProcessorException.class, () -> step.execute(context));
        assertEquals("Enrollment incomplete for companyId: company-123", exception.getMessage());
        assertEquals(false, context.get("companyEnrolled"));
    }
}
public class TestUtils {

    public static Event mockEventWithResourceUUID(String uuid) {
        Event event = mock(Event.class);
        MessageBody messageBody = mock(MessageBody.class);

        when(event.getMessageBody()).thenReturn(messageBody);
        when(messageBody.getResourceUUID()).thenReturn(UUID.fromString(uuid));
        return event;
    }
}
