package net.jpmchase.payroll.processor.service;

import net.jpmchase.payroll.processor.conditions.ExecutionCondition;
import net.jpmchase.payroll.processor.config.StepConfig;
import net.jpmchase.payroll.processor.config.StepConfig.BackOffRetry;
import net.jpmchase.payroll.processor.context.WorkflowContext;
import net.jpmchase.payroll.processor.model.Event;
import net.jpmchase.payroll.processor.registry.ConditionRegistry;
import net.jpmchase.payroll.processor.registry.WorkflowRegistry;
import net.jpmchase.payroll.processor.repository.RetryOutboxRepository;
import net.jpmchase.payroll.processor.steps.Step;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;

import java.time.LocalTime;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class EventProcessorServiceTest {

    @InjectMocks private EventProcessorService service;

    @Mock private WorkflowRegistry workflowRegistry;
    @Mock private RetryOutboxRepository retryOutboxRepository;
    @Mock private ConditionRegistry conditionRegistry;
    @Mock private Step stepExecutor;

    private Map<String, Step> stepRegistry;

    private final Event testEvent = new Event("employee.bank_account", "created");

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        stepRegistry = new HashMap<>();
        service = new EventProcessorService(workflowRegistry, stepRegistry, conditionRegistry, retryOutboxRepository);
    }

    private StepConfig createStep(String name, String condition, boolean retry, int immediateRetries) {
        StepConfig step = new StepConfig();
        step.setName(name);
        step.setExecuteOnCondition(condition);
        step.setDisableRetry(!retry);
        step.setImmediateRetryCount(immediateRetries);
        return step;
    }

    private void registerStep(String name) {
        when(stepExecutor.getName()).thenReturn(name);
        stepRegistry.put(name, stepExecutor);
    }

    // ----------- EXECUTION SCENARIOS -----------

    @Test
    void shouldSkipStepIfNotInRegistry() {
        StepConfig step = createStep("missingStep", "always", true, 1);
        when(workflowRegistry.getStepsForEvent(any(), any())).thenReturn(List.of(step));

        service.processEvent(testEvent);
        verify(stepExecutor, never()).execute(any());
    }

    @Test
    void shouldExecuteStepWithAlwaysCondition() {
        StepConfig step = createStep("stepAlways", "always", true, 1);
        when(workflowRegistry.getStepsForEvent(any(), any())).thenReturn(List.of(step));
        registerStep("stepAlways");

        service.processEvent(testEvent);
        verify(stepExecutor).execute(any());
    }

    @Test
    void shouldSkipStepIfConditionReturnsFalse() {
        StepConfig step = createStep("stepFalse", "someCondition", true, 1);
        when(workflowRegistry.getStepsForEvent(any(), any())).thenReturn(List.of(step));
        when(conditionRegistry.get("someCondition")).thenReturn(context -> false);
        registerStep("stepFalse");

        service.processEvent(testEvent);
        verify(stepExecutor, never()).execute(any());
    }

    @Test
    void shouldSkipStepIfConditionNotFound() {
        StepConfig step = createStep("stepInvalid", "invalidCondition", true, 1);
        when(workflowRegistry.getStepsForEvent(any(), any())).thenReturn(List.of(step));
        when(conditionRegistry.get("invalidCondition")).thenReturn(null);
        registerStep("stepInvalid");

        service.processEvent(testEvent);
        verify(stepExecutor, never()).execute(any());
    }

    // ----------- RETRY LOGIC -----------

    @Test
    void shouldRetryStepOnFailureWithinLimit() {
        StepConfig step = createStep("retryStep", "always", true, 2);
        when(workflowRegistry.getStepsForEvent(any(), any())).thenReturn(List.of(step));
        registerStep("retryStep");

        doThrow(RuntimeException.class).when(stepExecutor).execute(any());

        service.processEvent(testEvent);
        verify(stepExecutor, times(2)).execute(any());
    }

    @Test
    void shouldNotRetryIfDisableRetryTrue() {
        StepConfig step = createStep("noRetryStep", "always", false, 2);
        when(workflowRegistry.getStepsForEvent(any(), any())).thenReturn(List.of(step));
        registerStep("noRetryStep");

        doThrow(RuntimeException.class).when(stepExecutor).execute(any());

        service.processEvent(testEvent);
        verify(stepExecutor, times(1)).execute(any());
    }

    // ----------- BACKOFF RETRY -----------

    @Test
    void shouldNotTriggerBackoffIfCutoffTimePassed() {
        StepConfig step = createStep("backoffLate", "always", true, 0);
        BackOffRetry backoff = new BackOffRetry();
        backoff.setEnabled(true);
        backoff.setMaxBackOffHours(3);
        backoff.setCutoffTime(LocalTime.now().minusMinutes(10).toString());
        step.setBackOffRetry(backoff);

        when(workflowRegistry.getStepsForEvent(any(), any())).thenReturn(List.of(step));
        registerStep("backoffLate");

        doThrow(RuntimeException.class).when(stepExecutor).execute(any());

        service.processEvent(testEvent);
        verify(retryOutboxRepository, never()).save(any());
    }

    @Test
    void shouldTriggerBackoffIfCutoffTimeIsFuture() {
        StepConfig step = createStep("backoffEarly", "always", true, 0);
        BackOffRetry backoff = new BackOffRetry();
        backoff.setEnabled(true);
        backoff.setMaxBackOffHours(3);
        backoff.setCutoffTime(LocalTime.now().plusMinutes(30).toString());
        step.setBackOffRetry(backoff);

        when(workflowRegistry.getStepsForEvent(any(), any())).thenReturn(List.of(step));
        registerStep("backoffEarly");

        doThrow(RuntimeException.class).when(stepExecutor).execute(any());

        service.processEvent(testEvent);
        verify(retryOutboxRepository, times(1)).save(any());
    }

    @Test
    void shouldMarkStatusCompleteAfterAllSteps() {
        StepConfig step1 = createStep("s1", "always", true, 1);
        StepConfig step2 = createStep("s2", "always", true, 1);

        when(workflowRegistry.getStepsForEvent(any(), any())).thenReturn(List.of(step1, step2));
        registerStep("s1");
        registerStep("s2");

        service.processEvent(testEvent);
        verify(stepExecutor, times(2)).execute(any());
    }

    @Test
    void shouldBreakStepLoopIfStatusIsSuccess() {
        StepConfig step1 = createStep("s1", "always", true, 1);
        StepConfig step2 = createStep("s2", "always", true, 1);

        when(workflowRegistry.getStepsForEvent(any(), any())).thenReturn(List.of(step1, step2));
        registerStep("s1");
        registerStep("s2");

        doAnswer(invocation -> {
            WorkflowContext ctx = invocation.getArgument(0);
            ctx.setStatus(WorkflowContext.Status.SUCCESS);
            return null;
        }).when(stepExecutor).execute(any());

        service.processEvent(testEvent);
        verify(stepExecutor, times(1)).execute(any()); // should break early
    }


Here’s a polished version of your update email to the team:

⸻

Subject: Latest Update: Processor Framework Changes & Onboarding Step

Hi Team,

This is a follow-up to my earlier update this morning.

The framework changes on the Payroll Event Processor have now been reviewed and are conditionally approved for now.
Please take the latest code for the framework changes on the processor from the shared branch/repo.

I’m currently working on implementing the onboarding status check step. If you need this step as part of your workflow—particularly for employee/contractor update webhook events received from Gusto—please hold off for my response. I’ll share the finalized implementation and the related JIRA ticket shortly so you can plug it in easily.

Thanks,
Kasi

⸻

Let me know if you’d like to include the JIRA ticket link or commit SHA, and I can insert it for you.

}