private void executeStepWithRetry(StepConfig stepConfig, Event event, int retryCount) {
    Step stepExecutor = stepRegistry.get(stepConfig.getName());
    
    if (stepExecutor == null) {
        log.warn("Step '{}' not found for event '{}'.", stepConfig.getName(), event.getEventType());
        return;
    }

    if (!evaluateCondition(stepConfig.getCondition(), event)) {
        log.info("[PROCESSOR] Skipping step '{}' due to condition '{}'", stepConfig.getName(), stepConfig.getCondition());
        return;
    }

    if (stepConfig.isDisableRetry()) {
        try {
            stepExecutor.execute(event);
            log.info("[PROCESSOR] Step '{}' executed successfully (No Retry Allowed).", stepConfig.getName());
        } catch (Exception e) {
            log.error("[PROCESSOR] Step '{}' failed. No retries allowed. Error: {}", stepConfig.getName(), e.getMessage());
            sendToRetryQueue(event, stepConfig.getName(), retryCount, 900); // 15-minute delay
        }
        return;
    }

    while (retryCount < workFlowRegistry.getRetryCountForStep(event.getEventType(), stepConfig.getName())) {
        try {
            log.info("Executing step '{}' (Attempt {}/{}).", stepConfig.getName(), retryCount + 1, workFlowRegistry.getRetryCountForStep(event.getEventType(), stepConfig.getName()));
            stepExecutor.execute(event);
            return;
        } catch (Exception e) {
            retryCount++;
            int delay = workFlowRegistry.getBackoffDelay(event.getEventType(), stepConfig.getName(), retryCount);
            log.error("Step '{}' failed (Retry {}/{}). Retrying in {} seconds.", stepConfig.getName(), retryCount, workFlowRegistry.getRetryCountForStep(event.getEventType(), stepConfig.getName()), delay);
            sendToRetryQueue(event, stepConfig.getName(), retryCount, delay);
        }
    }
}

public void processFromStep(Event event, String failedStep, int retryCount) {
    List<StepConfig> steps = workFlowRegistry.getStepsForEvent(event.getEventType());
    int startIndex = findStepIndex(steps, failedStep);

    if (startIndex == -1) {
        log.error("Step '{}' not found in workflow for event '{}'. Skipping processing.", failedStep, event.getEventType());
        return;
    }

    log.info("Resuming event '{}' from step '{}' (Retry Count: {}).", event.getEventType(), failedStep, retryCount);

    for (int i = startIndex; i < steps.size(); i++) {
        executeStepWithRetry(steps.get(i), event, retryCount);
    }
}

private void sendToRetryQueue(Event event, String step, int retryCount, int delay) {
    sqsClient.sendMessage(SendMessageRequest.builder()
        .queueUrl(retryQueueUrl)
        .messageBody("{\"event\": \"" + event.getEventType() + "\", \"step\": \"" + step + "\", \"retryCount\": " + retryCount + "}")
        .delaySeconds(delay)
        .build());
}
