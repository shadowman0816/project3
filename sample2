package net.jpmchase.payroll.processor.common.aspect;

import net.jpmchase.payroll.processor.model.Event;
import net.jpmchase.payroll.processor.model.EventLogEntity;
import net.jpmchase.payroll.processor.repository.EventLogRepository;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.reflect.MethodSignature;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.Optional;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class EventLogAspectTest {

    @InjectMocks
    private EventLogAspect eventLogAspect;

    @Mock
    private EventLogRepository eventLogRepository;

    @Mock
    private ProceedingJoinPoint proceedingJoinPoint;

    @Mock
    private JoinPoint joinPoint;

    private Event event;
    private EventLogEntity eventLogEntity;

    @BeforeEach
    void setUp() {
        event = new Event();
        event.setEventLogId(UUID.randomUUID());
        event.setEventType("payroll.processed");

        eventLogEntity = EventLogEntity.builder()
                .eventLogId(event.getEventLogId())
                .srcEvntId(UUID.randomUUID().toString())
                .srcEvntType(event.getEventType())
                .srcEvntTs(Timestamp.valueOf(LocalDateTime.now()))
                .entityType("Payroll")
                .entityId(UUID.randomUUID().toString())
                .srcEvntSts("IN_PROGRESS")
                .creTs(Timestamp.valueOf(LocalDateTime.now()))
                .creUsrId("SYSTEM")
                .updtTs(Timestamp.valueOf(LocalDateTime.now()))
                .updtUsrId("SYSTEM")
                .build();
    }

    @Test
    void testTrackStepExecution_Successful() throws Throwable {
        when(proceedingJoinPoint.getArgs()).thenReturn(new Object[]{event});
        when(proceedingJoinPoint.getSignature()).thenReturn(mock(MethodSignature.class));
        when(eventLogRepository.findBySrcEvntId(any(UUID.class))).thenReturn(Optional.of(eventLogEntity));
        when(proceedingJoinPoint.proceed()).thenReturn("Success");

        Object result = eventLogAspect.trackStepExecution(proceedingJoinPoint);

        assertEquals("Success", result);
        verify(eventLogRepository, times(2)).save(any(EventLogEntity.class));
    }

    @Test
    void testTrackStepExecution_Failure() throws Throwable {
        when(proceedingJoinPoint.getArgs()).thenReturn(new Object[]{event});
        when(proceedingJoinPoint.getSignature()).thenReturn(mock(MethodSignature.class));
        when(eventLogRepository.findBySrcEvntId(any(UUID.class))).thenReturn(Optional.of(eventLogEntity));
        when(proceedingJoinPoint.proceed()).thenThrow(new RuntimeException("Processing error"));

        assertThrows(RuntimeException.class, () -> eventLogAspect.trackStepExecution(proceedingJoinPoint));

        verify(eventLogRepository, times(2)).save(any(EventLogEntity.class));
    }

    @Test
    void testUpdateEventLog_NewEntry() {
        when(eventLogRepository.findBySrcEvntId(any(UUID.class))).thenReturn(Optional.empty());

        eventLogAspect.updateEventLog(event, "FetchPayroll", "SUCCESS", null);

        verify(eventLogRepository, times(1)).save(any(EventLogEntity.class));
    }

    @Test
    void testUpdateEventLog_UpdateExistingEntry() {
        when(eventLogRepository.findBySrcEvntId(any(UUID.class))).thenReturn(Optional.of(eventLogEntity));

        eventLogAspect.updateEventLog(event, "FetchPayroll", "FAILED", "Service unavailable");

        verify(eventLogRepository, times(1)).save(any(EventLogEntity.class));
        assertEquals("FAILED", eventLogEntity.getSrcEvntSts());
        assertEquals("Service unavailable", eventLogEntity.getStatusRsn());
    }

    @Test
    void testTrackStepStart() {
        when(joinPoint.getSignature()).thenReturn(mock(MethodSignature.class));
        when(joinPoint.getArgs()).thenReturn(new Object[]{event});

        eventLogAspect.trackStepStart(joinPoint);

        verify(eventLogRepository, times(1)).save(any(EventLogEntity.class));
    }
}
//Test cases for WorkFlowConfig
package net.jpmchase.payroll.processor.registry;

import net.jpmchase.payroll.processor.config.RetryConfig;
import net.jpmchase.payroll.processor.config.StepConfig;
import net.jpmchase.payroll.processor.config.WorkFlowConfig;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.List;
import java.util.Map;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class WorkflowRegistryTest {

    @InjectMocks
    private WorkflowRegistry workflowRegistry;

    @Mock
    private WorkFlowConfig workFlowConfig;

    @Mock
    private RetryConfig retryConfig;

    private final String eventType = "payroll.processed";
    private final String stepName = "fetchPayroll";
    private StepConfig stepConfig;

    @BeforeEach
    void setUp() {
        stepConfig = new StepConfig();
        stepConfig.setName(stepName);
        stepConfig.setRetryCount(3);

        StepConfig.BackOffSettings backOffSettings = new StepConfig.BackOffSettings();
        backOffSettings.setInitialDelaySeconds(5);
        backOffSettings.setMaxDelaySeconds(60);
        backOffSettings.setMultiplier(2.0);
        stepConfig.setBackOffSettings(backOffSettings);

        when(workFlowConfig.getSteps()).thenReturn(Map.of(eventType, List.of(stepConfig)));
        when(retryConfig.getInitialDelaySeconds()).thenReturn(10);
        when(retryConfig.getMaxDelaySeconds()).thenReturn(120);
        when(retryConfig.getMultiplier()).thenReturn(1.5);
    }

    @Test
    void testGetStepsForEvent_ExistingEvent() {
        List<StepConfig> steps = workflowRegistry.getStepsForEvent(eventType);
        assertNotNull(steps);
        assertEquals(1, steps.size());
        assertEquals(stepName, steps.get(0).getName());
    }

    @Test
    void testGetStepsForEvent_NonExistingEvent() {
        List<StepConfig> steps = workflowRegistry.getStepsForEvent("unknown.event");
        assertNotNull(steps);
        assertTrue(steps.isEmpty());
    }

    @Test
    void testGetStepConfig_ValidStep() {
        StepConfig result = workflowRegistry.getStepConfig(eventType, stepName);
        assertNotNull(result);
        assertEquals(stepName, result.getName());
    }

    @Test
    void testGetStepConfig_InvalidStep() {
        StepConfig result = workflowRegistry.getStepConfig(eventType, "invalidStep");
        assertNull(result);
    }

    @Test
    void testGetRetryCountForStep_ExistingStep() {
        int retryCount = workflowRegistry.getRetryCountForStep(eventType, stepName);
        assertEquals(3, retryCount);
    }

    @Test
    void testGetRetryCountForStep_NonExistingStep() {
        int retryCount = workflowRegistry.getRetryCountForStep(eventType, "invalidStep");
        assertEquals(0, retryCount);
    }

    @Test
    void testGetBackoffDelay_WithStepConfig() {
        int delay = workflowRegistry.getBackoffDelay(eventType, stepName, 2);
        assertEquals(20, delay); // 5 * 2^1 = 10 but max is 60, so 10 * 2 = 20
    }

    @Test
    void testGetBackoffDelay_WithRetryConfigFallback() {
        when(workFlowConfig.getSteps()).thenReturn(Map.of(eventType, List.of()));
        int delay = workflowRegistry.getBackoffDelay(eventType, stepName, 2);
        assertEquals(15, delay); // 10 * 1.5^1 = 15
    }

    @Test
    void testGetBackoffDelay_MaxDelayCap() {
        int delay = workflowRegistry.getBackoffDelay(eventType, stepName, 10);
        assertEquals(60, delay); // Should not exceed max delay
    }

    @Test
    void testGetBackoffDelay_NonExistingStep() {
        int delay = workflowRegistry.getBackoffDelay(eventType, "invalidStep", 2);
        assertEquals(0, delay);
    }
}

package net.jpmchase.payroll.processor.service;

import net.jpmchase.payroll.processor.model.Event;
import net.jpmchase.payroll.processor.registry.WorkFlowRegistry;
import net.jpmchase.payroll.processor.steps.Step;
import net.jpmchase.payroll.processor.steps.StepConfig;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import software.amazon.awssdk.services.sqs.SqsClient;
import software.amazon.awssdk.services.sqs.model.SendMessageRequest;

import java.util.Collections;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class EventProcessorServiceTest {

    @Mock
    private WorkFlowRegistry workFlowRegistry;

    @Mock
    private SqsClient sqsClient;

    @Mock
    private Map<String, Step> stepRegistry;

    @InjectMocks
    private EventProcessorService eventProcessorService;

    private Event event;
    private StepConfig stepConfig;
    private Step stepExecutor;

    @BeforeEach
    void setUp() {
        event = mock(Event.class);
        when(event.getEventType()).thenReturn("payroll.processed");

        stepConfig = mock(StepConfig.class);
        when(stepConfig.getName()).thenReturn("fetchPayroll");
        when(stepConfig.isDisableRetry()).thenReturn(false);
        when(stepConfig.getCondition()).thenReturn("always");

        stepExecutor = mock(Step.class);
    }

    @Test
    void shouldSkipProcessingIfNoWorkflowStepsFound() {
        when(workFlowRegistry.getStepsForEvent(event.getEventType())).thenReturn(Collections.emptyList());

        eventProcessorService.processEvent(event);

        verify(workFlowRegistry, times(1)).getStepsForEvent(event.getEventType());
        verifyNoInteractions(stepRegistry);
    }

    @Test
    void shouldExecuteAllStepsSuccessfully() {
        when(workFlowRegistry.getStepsForEvent(event.getEventType())).thenReturn(List.of(stepConfig));
        when(stepRegistry.get("fetchPayroll")).thenReturn(stepExecutor);

        eventProcessorService.processEvent(event);

        verify(stepExecutor, times(1)).execute(event);
    }

    @Test
    void shouldHandleStepNotFoundInRegistry() {
        when(workFlowRegistry.getStepsForEvent(event.getEventType())).thenReturn(List.of(stepConfig));
        when(stepRegistry.get("fetchPayroll")).thenReturn(null);

        eventProcessorService.processEvent(event);

        verify(stepRegistry, times(1)).get("fetchPayroll");
        verifyNoMoreInteractions(stepExecutor);
    }

    @Test
    void shouldRetryStepExecutionOnFailure() {
        when(workFlowRegistry.getStepsForEvent(event.getEventType())).thenReturn(List.of(stepConfig));
        when(workFlowRegistry.getRetryCountForStep(event.getEventType(), "fetchPayroll")).thenReturn(3);
        when(workFlowRegistry.getBackoffDelay(event.getEventType(), "fetchPayroll", 1)).thenReturn(10);
        when(stepRegistry.get("fetchPayroll")).thenReturn(stepExecutor);

        doThrow(new RuntimeException("Step execution failed"))
                .when(stepExecutor).execute(event);

        eventProcessorService.processEvent(event);

        verify(stepExecutor, times(1)).execute(event);
        verify(sqsClient, times(1)).sendMessage(any(SendMessageRequest.class));
    }

    @Test
    void shouldSkipStepExecutionWhenConditionIsNotMet() {
        when(workFlowRegistry.getStepsForEvent(event.getEventType())).thenReturn(List.of(stepConfig));
        when(stepConfig.getCondition()).thenReturn("futureDate");
        when(event.getRouting()).thenReturn("ACH");  // Condition not matching
        when(stepRegistry.get("fetchPayroll")).thenReturn(stepExecutor);

        eventProcessorService.processEvent(event);

        verify(stepExecutor, never()).execute(event);
    }

    @Test
    void shouldSendToRetryQueueAfterExhaustingRetries() {
        when(workFlowRegistry.getStepsForEvent(event.getEventType())).thenReturn(List.of(stepConfig));
        when(stepRegistry.get("fetchPayroll")).thenReturn(stepExecutor);
        when(workFlowRegistry.getRetryCountForStep(event.getEventType(), "fetchPayroll")).thenReturn(1);
        when(workFlowRegistry.getBackoffDelay(event.getEventType(), "fetchPayroll", 2)).thenReturn(15);

        doThrow(new RuntimeException("Step execution failed")).when(stepExecutor).execute(event);

        eventProcessorService.processEvent(event);

        verify(sqsClient, times(1)).sendMessage(any(SendMessageRequest.class));
    }
}
