package net.jpmchase.payroll.processor.steps.payee.gusto;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.jpmchase.payroll.processor.common.context.WorkflowContext;
import net.jpmchase.payroll.processor.remote.gusto.model.payment.EmployeePaymentConfiguration;
import net.jpmchase.payroll.processor.remote.gusto.model.payment.Split;
import net.jpmchase.payroll.processor.service.GustoPaymentConfigurationService;
import net.jpmchase.payroll.processor.steps.Step;
import net.jpmchase.payroll.processor.model.Event;
import org.springframework.stereotype.Component;

import java.util.Optional;
import java.util.Set;
import java.util.UUID;

import static net.jpmchase.payroll.processor.common.constants.ProcessorConstants.PROCESSOR_FAILED;

@Slf4j
@Component("FetchEmployeeBankAccountInformationFromGusto")
@RequiredArgsConstructor
public class GustoEmployeeBankAccountRetrievalStep implements Step {

    private final GustoPaymentConfigurationService paymentConfigurationService;

    @Override
    public void execute(WorkflowContext context) {
        Event event = context.get("event", Event.class);

        String companyId = Optional.ofNullable(event)
                .map(Event::getMessageBody)
                .map(body -> body.getEnterprisePartyIdentifier())
                .map(UUID::toString)
                .orElseThrow(() -> new IllegalArgumentException("Missing enterprise party identifier"));

        String employeeId = Optional.ofNullable(event)
                .map(Event::getMessageBody)
                .map(body -> body.getEntityUUID())
                .map(UUID::toString)
                .orElseThrow(() -> new IllegalArgumentException("Missing employee UUID"));

        String resourceUUID = Optional.ofNullable(event)
                .map(Event::getMessageBody)
                .map(body -> body.getResourceUUID())
                .map(UUID::toString)
                .orElseThrow(() -> new IllegalArgumentException("Missing resource UUID"));

        log.info("Fetching Gusto payment configuration for company: {}, employee: {}, bank account UUID: {}", companyId, employeeId, resourceUUID);

        EmployeePaymentConfiguration paymentConfig =
                paymentConfigurationService.getPaymentConfigurationsForAnEmployee(companyId, employeeId);

        Set<Split> splits = Optional.ofNullable(paymentConfig.getSplits()).orElse(Set.of());

        boolean exists = splits.stream()
                .map(Split::getBankAccountUUID)
                .anyMatch(uuid -> uuid != null && uuid.equalsIgnoreCase(resourceUUID));

        if (exists) {
            log.warn("Bank account UUID {} still exists in Gusto. Cannot update payment method to CHECK. Marking event as failed.", resourceUUID);
            context.set("updateToCheck", false);
            throw new ProcessorException(PROCESSOR_FAILED, "Bank account still exists in Gusto for resource UUID: " + resourceUUID);
        } else {
            log.info("Bank account UUID {} not found in Gusto. Updating payment method to CHECK.", resourceUUID);
            context.set("updateToCheck", true);
        }
    }
}
package net.jpmchase.payroll.processor.steps.payee.gusto;

import net.jpmchase.payroll.processor.common.context.WorkflowContext;
import net.jpmchase.payroll.processor.exception.BusinessException;
import net.jpmchase.payroll.processor.exception.ProcessorException;
import net.jpmchase.payroll.processor.remote.gusto.model.payment.EmployeePaymentConfiguration;
import net.jpmchase.payroll.processor.remote.gusto.model.payment.Split;
import net.jpmchase.payroll.processor.repository.EnrollmentRepository;
import net.jpmchase.payroll.processor.steps.Step;
import net.jpmchase.payroll.processor.service.GustoPaymentConfigurationService;
import net.jpmchase.payroll.processor.model.entity.EnrollmentEntity;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class GustoEmployeeBankAccountRetrievalStepTest {

    @Mock
    private GustoPaymentConfigurationService paymentConfigurationService;

    @Mock
    private EnrollmentRepository companyEnrollmentRepository;

    @InjectMocks
    private GustoEmployeeBankAccountRetrievalStep step;

    private WorkflowContext context;

    @BeforeEach
    void setup() {
        MockitoAnnotations.openMocks(this);
        context = new WorkflowContext();
    }

    @Test
    void testMissingEmployeeIdThrowsException() {
        // companyId and bankAccountUUID are present, employeeId missing
        context.put("event", TestUtils.mockEventWithReferencesAndResource("company_uuid", "C1", "bank_account_uuid", "B1"));

        Exception ex = assertThrows(BusinessException.class, () -> step.execute(context));
        assertTrue(ex.getMessage().contains("Missing Employee identifier"));
    }

    @Test
    void testMissingCompanyIdThrowsException() {
        context.put("event", TestUtils.mockEventWithReferencesOnly("employee_uuid", "E1"));

        Exception ex = assertThrows(BusinessException.class, () -> step.execute(context));
        assertTrue(ex.getMessage().contains("Missing Company UUID"));
    }

    @Test
    void testMissingBankAccountUUIDThrowsException() {
        context.put("event", TestUtils.mockEventWithReferences("employee_uuid", "E1", "company_uuid", "C1"));

        Exception ex = assertThrows(BusinessException.class, () -> step.execute(context));
        assertTrue(ex.getMessage().contains("Missing Bank Account UUID"));
    }

    @Test
    void testBankAccountExistsInSplitsThrowsProcessorException() {
        context.put("event", TestUtils.mockEventWithAll("E1", "C1", "B1"));

        EnrollmentEntity enrollment = new EnrollmentEntity();
        when(companyEnrollmentRepository.findByRelEntpPrtyId("C1")).thenReturn(Optional.of(enrollment));

        Split split = new Split();
        split.setBankAccountUUID("B1");
        EmployeePaymentConfiguration paymentConfig = new EmployeePaymentConfiguration();
        paymentConfig.setSplits(Set.of(split));

        when(paymentConfigurationService.getPaymentConfigurationsForAnEmployee("C1", "E1")).thenReturn(paymentConfig);

        ProcessorException ex = assertThrows(ProcessorException.class, () -> step.execute(context));
        assertTrue(ex.getMessage().contains("still exists in Gusto"));
    }

    @Test
    void testBankAccountNotFoundInSplitsThenUpdateToCheck() {
        context.put("event", TestUtils.mockEventWithAll("E1", "C1", "B1"));

        EnrollmentEntity enrollment = new EnrollmentEntity();
        when(companyEnrollmentRepository.findByRelEntpPrtyId("C1")).thenReturn(Optional.of(enrollment));

        Split split = new Split();
        split.setBankAccountUUID("B2");  // different UUID
        EmployeePaymentConfiguration paymentConfig = new EmployeePaymentConfiguration();
        paymentConfig.setSplits(Set.of(split));

        when(paymentConfigurationService.getPaymentConfigurationsForAnEmployee("C1", "E1")).thenReturn(paymentConfig);

        step.execute(context);

        assertEquals(true, context.get("updateToCheck"));
    }

    @Test
    void testEmptySplitsThenNoUpdateToCheck() {
        context.put("event", TestUtils.mockEventWithAll("E1", "C1", "B1"));

        EnrollmentEntity enrollment = new EnrollmentEntity();
        when(companyEnrollmentRepository.findByRelEntpPrtyId("C1")).thenReturn(Optional.of(enrollment));

        EmployeePaymentConfiguration paymentConfig = new EmployeePaymentConfiguration();
        paymentConfig.setSplits(Collections.emptySet());

        when(paymentConfigurationService.getPaymentConfigurationsForAnEmployee("C1", "E1")).thenReturn(paymentConfig);

        step.execute(context);

        assertEquals(false, context.get("updateToCheck")); // Not explicitly set; could default to null or false
    }

    @Test
    void testEnrollmentNotFoundDoesNotThrow() {
        context.put("event", TestUtils.mockEventWithAll("E1", "C1", "B1"));

        when(companyEnrollmentRepository.findByRelEntpPrtyId("C1")).thenReturn(Optional.empty());

        EmployeePaymentConfiguration paymentConfig = new EmployeePaymentConfiguration();
        paymentConfig.setSplits(Collections.emptySet());

        when(paymentConfigurationService.getPaymentConfigurationsForAnEmployee("C1", "E1")).thenReturn(paymentConfig);

        assertDoesNotThrow(() -> step.execute(context));
    }
}
package net.jpmchase.payroll.processor.steps.payee.gusto;

import net.jpmchase.payroll.processor.common.context.WorkflowContext;
import net.jpmchase.payroll.processor.model.event.Event;
import net.jpmchase.payroll.processor.model.event.MessageBody;

import java.util.HashMap;
import java.util.Map;

public class TestUtils {

    public static Event mockEventWithAll(String employeeId, String companyId, String bankAccountUUID) {
        Event event = new Event();
        MessageBody messageBody = new MessageBody();

        Map<String, String> references = new HashMap<>();
        references.put("employee_uuid", employeeId);

        messageBody.setReferences(references);
        messageBody.setResourceUUID(bankAccountUUID);  // Bank account UUID
        messageBody.setEntityUUID(companyId);         // Company UUID

        event.setMessageBody(messageBody);
        return event;
    }

    public static Event mockEventWithReferences(String key1, String value1, String key2, String value2) {
        Event event = new Event();
        MessageBody messageBody = new MessageBody();

        Map<String, String> references = new HashMap<>();
        references.put(key1, value1);
        references.put(key2, value2);

        messageBody.setReferences(references);
        event.setMessageBody(messageBody);
        return event;
    }

    public static Event mockEventWithReferencesOnly(String key, String value) {
        Event event = new Event();
        MessageBody messageBody = new MessageBody();

        Map<String, String> references = new HashMap<>();
        references.put(key, value);

        messageBody.setReferences(references);
        event.setMessageBody(messageBody);
        return event;
    }

    public static Event mockEventWithReferencesAndResource(String refKey, String refVal, String resKey, String resVal) {
        Event event = new Event();
        MessageBody messageBody = new MessageBody();

        Map<String, String> references = new HashMap<>();
        references.put(refKey, refVal);

        messageBody.setReferences(references);
        messageBody.setResourceUUID(resVal);

        event.setMessageBody(messageBody);
        return event;
    }
}

@ExtendWith(MockitoExtension.class)
class GustoEmployeeBankAccountRetrievalStepTest {

    @Mock private GustoPaymentConfigurationService paymentConfigurationService;
    @Mock private EnrolLmentEntityRepository companyEnrollmentRepository;

    @InjectMocks
    private GustoEmployeeBankAccountRetrievalStep step;

    private WorkflowContext context;

    @BeforeEach
    void setup() {
        context = new WorkflowContext();
    }

    @Test
    void testThrowsExceptionWhenCompanyIdMissing() {
        Event event = new Event();
        context.put("event", event);

        assertThrows(IllegalArgumentException.class, () -> step.execute(context));
    }

    @Test
    void testThrowsExceptionWhenBankAccountUUIDMissing() {
        UUID employeeId = UUID.randomUUID();
        Event event = TestUtils.mockEventWithAll(employeeId.toString(), null, null);
        context.put("event", event);

        assertThrows(IllegalArgumentException.class, () -> step.execute(context));
    }

    @Test
    void testThrowsExceptionWhenEnrollmentMissing() {
        UUID companyId = UUID.randomUUID();
        UUID bankAccountUUID = UUID.randomUUID();
        UUID employeeId = UUID.randomUUID();
        context.put("event", TestUtils.mockEventWithAll(employeeId.toString(), companyId, bankAccountUUID));

        when(companyEnrollmentRepository.findByRelEntpPrtyId(companyId.toString())).thenReturn(Optional.empty());

        ProcessorException ex = assertThrows(ProcessorException.class, () -> step.execute(context));
        assertTrue(ex.getMessage().contains("No enrollment found"));
    }

    @Test
    void testBankAccountStillExistsInGusto_ThrowsException() {
        UUID companyId = UUID.randomUUID();
        UUID bankAccountUUID = UUID.randomUUID();
        UUID employeeId = UUID.randomUUID();
        context.put("event", TestUtils.mockEventWithAll(employeeId.toString(), companyId, bankAccountUUID));

        EnrolLmentEntity enrollment = new EnrolLmentEntity();
        enrollment.setRelEntpPrtyId(companyId.toString());

        when(companyEnrollmentRepository.findByRelEntpPrtyId(companyId.toString()))
                .thenReturn(Optional.of(enrollment));

        Split split = new Split();
        split.setBankAccountUUID(bankAccountUUID.toString());

        EmployeePaymentConfiguration config = new EmployeePaymentConfiguration();
        config.setSplits(Set.of(split));

        when(paymentConfigurationService.getPaymentConfigurationsForAnEmployee(companyId.toString(), employeeId.toString()))
                .thenReturn(config);

        ProcessorException ex = assertThrows(ProcessorException.class, () -> step.execute(context));
        assertTrue(ex.getMessage().contains("still exists in Gusto"));
    }

    @Test
    void testBankAccountNotInSplits_ContextUpdateToCheckTrue() {
        UUID companyId = UUID.randomUUID();
        UUID bankAccountUUID = UUID.randomUUID();
        UUID employeeId = UUID.randomUUID();
        context.put("event", TestUtils.mockEventWithAll(employeeId.toString(), companyId, bankAccountUUID));

        EnrolLmentEntity enrollment = new EnrolLmentEntity();
        enrollment.setRelEntpPrtyId(companyId.toString());

        when(companyEnrollmentRepository.findByRelEntpPrtyId(companyId.toString()))
                .thenReturn(Optional.of(enrollment));

        Split split = new Split();
        split.setBankAccountUUID("different-id");

        EmployeePaymentConfiguration config = new EmployeePaymentConfiguration();
        config.setSplits(Set.of(split));

        when(paymentConfigurationService.getPaymentConfigurationsForAnEmployee(companyId.toString(), employeeId.toString()))
                .thenReturn(config);

        step.execute(context);

        assertTrue((Boolean) context.get("updateToCheck"));
    }

    @Test
    void testEmptySplits_ContextUpdateToCheckTrue() {
        UUID companyId = UUID.randomUUID();
        UUID bankAccountUUID = UUID.randomUUID();
        UUID employeeId = UUID.randomUUID();
        context.put("event", TestUtils.mockEventWithAll(employeeId.toString(), companyId, bankAccountUUID));

        EnrolLmentEntity enrollment = new EnrolLmentEntity();
        enrollment.setRelEntpPrtyId(companyId.toString());

        when(companyEnrollmentRepository.findByRelEntpPrtyId(companyId.toString()))
                .thenReturn(Optional.of(enrollment));

        EmployeePaymentConfiguration config = new EmployeePaymentConfiguration();
        config.setSplits(Collections.emptySet());

        when(paymentConfigurationService.getPaymentConfigurationsForAnEmployee(companyId.toString(), employeeId.toString()))
                .thenReturn(config);

        step.execute(context);

        assertTrue((Boolean) context.get("updateToCheck"));
    }
}

